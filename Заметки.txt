
>npm init
>npm install express mongoose
>npm install -D nodemon concurrently
>npm i config
>npm i express-validator
>npm i jsonwebtoken
>npm install --save-dev cross-env

в паках:
    "scripts": {
        "start": "node app.js",
        "server": "nodemon app.js"
    },

npm run server
ctrl + c выключить сервер


//----------------//------------------//------------//-------------------//----------------------//
в корне лежит сам бкенд, потом можно создать папку для фронтеда
--- создаем новый файл app.js
    - подключаем пакеты
--- создаем папку config
    - создаем новый файл default.json // в нем мы храним не изменяемые величы (константы)
--- подключаемя к mongoose (база даных) в app.js
    {В mongodb я создал прект потом создал базу mongodb.com
     После создания креета нужно добавить IP адрес, которому будет разрешено делать запросы для запросов к базе
     нажимаем на зеленою кнопку для подключения моего ip
     дале создоем пользователя
     olegpodgo
     n2XgcCSn2LYTQO4D
     После нажатие далее. И выбираем 2-ое подключить ваше приложение
     потом копируем адрес mongodb+srv://olegpodgo:<password>@cluster0.iqk5h.mongodb.net/<dbname>?retryWrites=true&w=majority
     в сылке есть <password> в него пишим пароль  n2XgcCSn2LYTQO4D
     <dbname> --- имя проэкта
     после этого в терминале мы должны увидеть что все работает
     App has been started on port 5000...}

 ---------- разработка самого прилжения ---------------

--- регистрируем роутеры
    - создаем папку routes
--- пишим авторизвцию ---
    - в папке routes создаем новый файл auth(любое название).routes.js
        - в файл подключаем
        - также в этом же файле експортируем роутыры >module.exports = router
        - это все что нужно для его работы
    - создаем папку models для создания сушностей которые работают с даными
        - создаем новый файл User(любое название).js // работаем с даными пользователя
    - пишим логику регистрации в auth.routes.js
        - устанавливаем npm i express-validator // для проверки даных из фронтеда
        - npm i jsonwebtoken // атаризация у нас черз jsonwebtoken
    - теперь мы настраиваем фронтенд
        - npx create-react-app client(client --- любое название)
        - cd client/
        - rm -rf node_modules/ // удаляем
        - rm -rf .git
        - npm i
        - продолжаем настройку package.json
              "scripts": {
                "start": "node app.js",
                "server": "nodemon app.js",
                "client": "npm run start --prefix client",
                "dev": "concurrently \"npm run server\" \"npm run client\""
              },
        - в примере он устанавливает библеотеку для стилей
    - Настойка роутинга страниц
        - cd client/
        - npm i react-router-dom
        - создаем папку pages
            - создаем все необходимые страницы (по сути реакт компоненты)
                - >AuthPage.js
                - >CreatePage.js
                - >DetailPage.js
                - >LinksPage.js
            - для организации работы мы создаем routes.js в катором буду определять все наборы сылок
    - работаем со стилями
    - делаем запросы на сервер, для этого
        - создаем папку hooks
        - в нём же создаем файл http.hook.js .. эта функция работает с сервиром
            - позволяет делать запрос на сервер
            - слежка за процесом занрузки
            - слежка за ошибками
    - AuthPage.js запускаем http.hook.js запросами котрые нам нужны
        - так как у нас бек на посту 5000 а фронт отправляет на 3000
            // то мы во фронте в package.json вписываем >"proxy": "http://localhost:5000",
            // эту нужно только при разработке
    - создаем оповищение ошибки для пользователя
        - создаем в hooks файл message.hook.js // сюда вписываем логику
    - создаем авторизацию на фронте
        - создаем в hooks файл auth.hook.js // отвечает за авторизацию // выйти или зайти
    - експартируем в app  во фронте и чтобы даные из хука мы могли воспользовать в дочерних элементах делаем Сонтекст
        - создаем папку context
        - и вне создаем новый файл AuthContext.js
    - окончательные штрехи
        - говорим routes.js что мы заши и он перенаправляет на сайт
- само приложение
    - создаем папку components
    - в нем создаем Navbar.js и стилизируем
- пишим логику приложения
    - создаем новый файл в routes с именем link.routes.js
    - создаем новый файл в models с именем link(любое название).js // работаем с даными сылками
    - настраиваем отслежку кто сейчас на сайте
        - создаем папку middleware
        - создаем файл auth.middleware.js //   middleware --- это обычная функция которая позволяет перехватывать
                                          //   определенные даные и делать логику которую сейчас опишимм
        - устонавливаем библеотеку по уменьшению сылок >npm i shortid@2.2.15
    - работаем фронте
        - работаем в CreatePage.js
        - работаем в DetailPage.js
        - создаем и работаем в components файл Loader.js
        - создаем и работаем в  components файл LinkCard.js
        - создаем и работаем в pages файл LinksPage.js
        - создаем и работаем в components файл LinksList.js
    - Доработка бизнес-логики на сервере
        - создаем и работаем в routes файл redirect.routes.js
- конец разроботки
    - устанавливаем >npm install --save-dev cross-env
    - Добавление скриптов в package.json
              "scripts": {
                "start": "cross-env NODE_ENV=production node app.js",
                "server": "nodemon app.js",
                "client": "npm run start --prefix client",
                "client:install": "npm install --prefix client",
                "client:build": "npm run build --prefix client",
                "dev": "cross-env NODE_ENV=development concurrently \"npm run server\" \"npm run client\""
              },
    - создаем .gitignore
          .idea
          node_modules
    - создаем билд npm run client:build
    - убираем из index.html страный код
    - во фроньте мы в .gitignore дописуем
            # production
            /build
            build
    - создаем файл production.json в config
    - связывае с гитом
        - после создания проекта на гите
            git init
            git add .
            git commit -m "initial"
            git remote add origin https://github.com/OlegJust/mern-full-course.git
            git push -u origin master
    - работа с доменом 





//----------------//------------------//------------//-------------------//----------------------//


5000 => хардкордить подобные константы не есть хорошо поэтому будем использовать config
что бы с ним работать мы должны создать папку config, а потом создать файл default.json

Для того что бы её получить я сздаю const config = require("config")



------------------------  Теперь мы переходим к разроботке приложения ------------------

теперь нужно зарегистрировать роуты, которые поразному обрабатывают наши ip запросы с нашего фронтенда
для этого мы воспользуемся app.use() и в первую часть передаем строчку для будущего пути а вторым сам роут
для этого мы создаем папку routes и создаем файл auth.routes.js

в первую очередь мы делаем модуль авторизации

для зашифровывания пароля npm i bcryptjs

для проверки приходяших даных npm i express-validator
так как мы синг плей приложение устонавливаем npm i jsonwebtoken

>npx create-react-app client
посмотри настройку реакта в видео

в фронтенде для работы с роутингами мы устоновим

так как фронед обрашаеться 3000 а у бека порт 5000 для того чтобы исправить
мы у фронтеда в паках ставим это

...},
  "proxy": "http://localhost:5000", // вот
  "br...

это нужно только для разработки в продакшене оно работать не будет